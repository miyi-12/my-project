
####eXtreme Gradient Boosting

library(caret)
library(rpart)
library(caTools)
library(dplyr)
library(xgboost) 
data = read.csv("ml_data.csv")
varsToFactor = c("gender","race","hypertention",
                 "Noise_exposure",
                 "Diabetes")
data[varsToFactor] = lapply(data[varsToFactor], factor)
quantitative_columns = c("age","Total_energy","BMI",
                         "VitaminA","VitaminE","Calcium_intake","Magnesium_intake",
                         "blood_PB","urine_TL","urine_CS","urine_BA","urine_MO","urine_CO","urine_SB","urine_AS")
data[quantitative_columns] = scale(data[quantitative_columns])
split = createDataPartition(data$HL, p = 0.7, list = FALSE)

trainData = data[split, ]
testData = data[-split, ]

train_matrix = data.matrix(trainData[, -21])
train_label = trainData$HL
train_data_matrix = xgb.DMatrix(data = train_matrix, label = train_label)

test_matrix = data.matrix(testData[, -21])
test_label = testData$HL
table(train_label)
test_data_matrix = xgb.DMatrix(data = test_matrix, label = test_label)
grid=expand.grid(nrounds=c(75,100,150),
                  colsample_bytree=1,
                  min_child_weight=1,
                  eta=c(0.01,0.1,0.3),
                  gamma=c(0.5,0.25,0.1),
                  subsample=0.5,
                  max_depth=c(2,3,4))

cntrl=trainControl(method="cv",
                    number=10,
                    verboseIter=F,
                    returnData=F,
                    returnResamp="final")
train.xgb=train(x=train_matrix,
                 y=as.factor(train_label),
                 trControl=cntrl,tuneGrid=grid,method="xgbTree")
train.xgb
model_xgboost=xgboost(data = train_matrix,
                      label = train_label,
                      nrounds=75,
                      max_depth=3, eta=0.1,gamma=0.1, colsample_bytree=1,min_child_weight=1,subsample=0.5,objective="binary:logistic")
pred<-predict(model_xgboost,test_matrix)

library(pROC)
roc_result = roc(test_label, pred)
roc_result
######Fig. S5H
windows()
plot.roc(test_label, pred,percent=TRUE,col="#1c61b6",print.auc=TRUE,
         main = "Area under the curve for XGboost")

XG_predictions<- ifelse(pred > 0.5, "1", "0")
XG_predictions = as.factor(XG_predictions)
table(XG_predictions)
test_label = as.factor(test_label)
confusionMatrix(XG_predictions, test_label,positive = "1")
confusionMatrix(XG_predictions, test_label,positive = "1")$byClass
######Fig. S6H
library(PRROC)
true_labels = testData$HL
pr = pr.curve(scores.class0 = XG_predictions[test_label == "1"],  
               scores.class1 = XG_predictions[test_label == "0"],  
               curve = TRUE)
pr
pr_auc= pr$auc.integral
windows()
plot(pr, 
     main = paste("PR Curve for XGboost (PR-AUC =", round(pr_auc,2), ")"),
     xlab = "Recall", 
     ylab = "Precision", 
     col = "#1c61b6", 
     lwd = 2)
